[{"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/locales/i18n.ts":"1","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/store/configureStore.ts":"2","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/app/index.tsx":"3","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/app/containers/HomePage/Loadable.tsx":"4","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/app/containers/HomePage/index.tsx":"5","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/utils/messages.ts":"6","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/utils/redux-injectors.ts":"7","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/app/components/NotFoundPage/Loadable.tsx":"8","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/redux/auth/auth.reducer.ts":"9","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/redux/auth/auth.actions.ts":"10","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/utils/loadable.tsx":"11","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/redux/helpers.ts":"12","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/app/components/NotFoundPage/index.tsx":"13","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/store/reducers.ts":"14","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/index.tsx":"15","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/serviceWorker.ts":"16","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/styles/global-styles.ts":"17","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/redux/todo/todo.reducer.ts":"18"},{"size":1050,"mtime":1611299556750,"results":"19","hashOfConfig":"20"},{"size":871,"mtime":1611299556760,"results":"21","hashOfConfig":"20"},{"size":1064,"mtime":1611310003477,"results":"22","hashOfConfig":"20"},{"size":197,"mtime":1611299556745,"results":"23","hashOfConfig":"20"},{"size":323,"mtime":1611299556746,"results":"24","hashOfConfig":"20"},{"size":657,"mtime":1611299387729,"results":"25","hashOfConfig":"20"},{"size":475,"mtime":1611299387729,"results":"26","hashOfConfig":"20"},{"size":209,"mtime":1611299556741,"results":"27","hashOfConfig":"20"},{"size":3173,"mtime":1611309738027,"results":"28","hashOfConfig":"20"},{"size":2132,"mtime":1611301224040,"results":"29","hashOfConfig":"20"},{"size":750,"mtime":1611299556771,"results":"30","hashOfConfig":"20"},{"size":715,"mtime":1611315991018,"results":"31","hashOfConfig":"20"},{"size":955,"mtime":1611308179830,"results":"32","hashOfConfig":"20"},{"size":565,"mtime":1611315330598,"results":"33","hashOfConfig":"20"},{"size":1327,"mtime":1611299556748,"results":"34","hashOfConfig":"20"},{"size":5283,"mtime":1611299556756,"results":"35","hashOfConfig":"20"},{"size":474,"mtime":1611299556767,"results":"36","hashOfConfig":"20"},{"size":3666,"mtime":1611316223417,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11n4ho9",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/locales/i18n.ts",[],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/store/configureStore.ts",[],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/app/index.tsx",[],["77","78"],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/app/containers/HomePage/Loadable.tsx",[],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/app/containers/HomePage/index.tsx",[],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/utils/messages.ts",[],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/utils/redux-injectors.ts",[],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/app/components/NotFoundPage/Loadable.tsx",[],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/redux/auth/auth.reducer.ts",[],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/redux/auth/auth.actions.ts",["79"],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/utils/loadable.tsx",[],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/redux/helpers.ts",["80"],"import { MetaAction, PayloadAction } from './types';\n\nexport const createAction = <Type extends string, Meta, Error>(\n  type: Type,\n  meta?: Meta,\n  error?: Error,\n): MetaAction<Type, Meta, Error> => ({ type, meta, error });\n\nexport const createPayloadAction = <Type extends string, Payload, Meta, Error>(\n  type: Type,\n  payload?: Payload,\n  meta?: Meta,\n  error?: Error,\n): PayloadAction<Type, Payload, Meta, Error> => ({\n  ...createAction(type, meta, error),\n  payload,\n});\n\nexport const normalizeArr = <T>(\n  array: T[],\n  keyName: string = '_id',\n): Record<string, T> => {\n  const normalizedObj: Record<string, T> = {};\n  array.map(item => {\n    normalizedObj[keyName] = item;\n  });\n  return normalizedObj;\n};\n","/Users/vanbui/Sites/bioandme/bioandme-frontend/src/app/components/NotFoundPage/index.tsx",[],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/store/reducers.ts",[],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/index.tsx",[],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/serviceWorker.ts",[],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/styles/global-styles.ts",[],"/Users/vanbui/Sites/bioandme/bioandme-frontend/src/redux/todo/todo.reducer.ts",["81","82","83"],"import { RecordOf, Record, merge } from 'immutable';\n\nimport TodoAction from './todo.actions';\nimport { StandardAction } from '../types';\nimport { TodoPayload, TodoState } from './types';\nimport { normalizeArr } from 'redux/helpers';\nimport { current } from '@reduxjs/toolkit';\n\nconst initData: TodoState = {\n  isFetching: true,\n  error: null,\n  todos: {},\n  isUpdatingById: {},\n};\n\nconst initialState = Record(initData)(initData);\n\nexport default class TodoReducer {\n  static getReducer(\n    state: RecordOf<TodoState> = initialState,\n    action: StandardAction,\n  ): RecordOf<TodoState> {\n    switch (action.type) {\n      // Fetch\n      case TodoAction.TYPES.FETCH.START:\n      case TodoAction.TYPES.FETCH.SUCCESS:\n      case TodoAction.TYPES.FETCH.FAILURE:\n        return TodoReducer.handleFetch(state, action);\n\n      // Update\n      case TodoAction.TYPES.UPDATE.START:\n      case TodoAction.TYPES.UPDATE.SUCCESS:\n      case TodoAction.TYPES.UPDATE.FAILURE:\n        return TodoReducer.handleUpdate(state, action);\n\n      // Update Partial\n      case TodoAction.TYPES.UPDATE_PARTIAL.START:\n      case TodoAction.TYPES.UPDATE_PARTIAL.SUCCESS:\n      case TodoAction.TYPES.UPDATE_PARTIAL.FAILURE:\n        return TodoReducer.handleUpdatePartial(state, action);\n\n      // Sync actions\n\n      default:\n        return state;\n    }\n  }\n\n  static handleFetch = (\n    state: RecordOf<TodoState>,\n    action: StandardAction<{ todos }>,\n  ): RecordOf<TodoState> => {\n    switch (action.type) {\n      case TodoAction.TYPES.FETCH.START:\n        return state.set('isFetching', true).set('error', '');\n      case TodoAction.TYPES.FETCH.SUCCESS:\n        return state\n          .set('isFetching', false)\n          .set('todos', normalizeArr<TodoPayload>(action.payload?.todos));\n\n      case TodoAction.TYPES.FETCH.FAILURE:\n        return state.set('isFetching', false).set('error', action.error);\n\n      default:\n        return state;\n    }\n    return state;\n  };\n\n  static handleUpdate = (\n    state: RecordOf<TodoState>,\n    action: StandardAction<{ todo: TodoPayload }>,\n  ): RecordOf<TodoState> => {\n    switch (action.type) {\n      case TodoAction.TYPES.UPDATE.START:\n        return state\n          .setIn(['isUpdatingById', action.payload?.todo._id], true)\n          .set('error', '');\n\n      case TodoAction.TYPES.UPDATE.SUCCESS:\n        return state\n          .setIn(['isUpdatingById', action.payload?.todo._id], false)\n          .setIn(['todos', action.payload?.todo._id], action.payload?.todo);\n\n      case TodoAction.TYPES.UPDATE.FAILURE:\n        return state\n          .setIn(['isUpdatingById', action.payload?.todo._id], false)\n          .set('error', action.error);\n      default:\n        return state;\n    }\n  };\n\n  static handleUpdatePartial = (\n    state: RecordOf<TodoState>,\n    action: StandardAction<{ todo: TodoPayload }>,\n  ): RecordOf<TodoState> => {\n    switch (action.type) {\n      case TodoAction.TYPES.UPDATE_PARTIAL.START:\n        return state\n          .setIn(['isUpdatingById', action.payload?.todo._id], true)\n          .set('error', '');\n      case TodoAction.TYPES.UPDATE_PARTIAL.SUCCESS:\n        const currentTodo = state.todos[action.payload?.todo._id || 0];\n        const mergedTodo = merge(currentTodo, action.payload?.todo || {});\n        return state\n          .setIn(['isUpdatingById', action.payload?.todo._id], false)\n          .setIn(['todos', action.payload?.todo._id], mergedTodo);\n\n      case TodoAction.TYPES.UPDATE_PARTIAL.FAILURE:\n        return state\n          .setIn(['isUpdatingById', action.payload?.todo._id], false)\n          .set('error', action.error);\n\n      default:\n        return state;\n    }\n\n    return state;\n  };\n}\n",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":79,"column":1,"nodeType":null,"endLine":80,"endColumn":1,"fix":"90"},{"ruleId":"91","severity":1,"message":"92","line":24,"column":18,"nodeType":"93","messageId":"94","endLine":24,"endColumn":20},{"ruleId":"95","severity":1,"message":"96","line":7,"column":10,"nodeType":"97","messageId":"98","endLine":7,"endColumn":17},{"ruleId":"99","severity":1,"message":"100","line":67,"column":5,"nodeType":"101","messageId":"102","endLine":67,"endColumn":18},{"ruleId":"99","severity":1,"message":"100","line":119,"column":5,"nodeType":"101","messageId":"102","endLine":119,"endColumn":18},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"prettier/prettier","Delete `⏎`",{"range":"105","text":"106"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","@typescript-eslint/no-unused-vars","'current' is defined but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-global-assign","no-unsafe-negation",[2129,2130],""]